const express = require('express');
const cors = require('cors');
const PasswordValidator = require('./passwordValidator');
const { specs, swaggerUi } = require('./swagger');

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json());

// 游녢 Agregar Swagger UI
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {
    customCss: '.swagger-ui .topbar { display: none }',
    customSiteTitle: "API Validaci칩n de Contrase침as"
}));

const validator = new PasswordValidator();

validator.loadDictionary()
    .then(() => {
        console.log('Servidor listo para validar contrase침as');
        console.log(`Documentaci칩n disponible en: http://localhost:${PORT}/api-docs`);
    })
    .catch(error => {
        console.error('Error al cargar el diccionario:', error);
        process.exit(1);
    });


 
app.get('/', (req, res) => {
    res.json({
        endpoints: {
            validate: 'POST /api/validate',
            documentation: 'GET /api-docs'
        }
    });
});

/**
 * @swagger
 * /api/validate:
 *   post:
 *     summary: Validar seguridad de una contrase침a
 *     tags: [Validaci칩n]
 *     description: |
 *       Eval칰a la fortaleza de una contrase침a bas치ndose en m칰ltiples criterios:
 *       - C치lculo de entrop칤a seg칰n el conjunto de caracteres usado
 *       - Verificaci칩n contra diccionario de 1 mill칩n de contrase침as comunes
 *       - Estimaci칩n de tiempo de crackeo (asumiendo 10^11 intentos/segundo)
 *       - Categorizaci칩n de fuerza (Muy D칠bil, D칠bil, Media, Fuerte, Muy Fuerte)
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - password
 *             properties:
 *               password:
 *                 type: string
 *                 description: La contrase침a a evaluar
 *                 example: "MiContrase침a123!"
 *           examples:
 *             contrase침a_debil:
 *               summary: Contrase침a d칠bil (en diccionario)
 *               value:
 *                 password: "123456"
 *             contrase침a_media:
 *               summary: Contrase침a media
 *               value:
 *                 password: "Password123"
 *             contrase침a_fuerte:
 *               summary: Contrase침a fuerte
 *               value:
 *                 password: "MiC0ntr@se침@S3gur@2024!"
 *     responses:
 *       200:
 *         description: An치lisis exitoso de la contrase침a
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 password_length:
 *                   type: integer
 *                   description: Longitud de la contrase침a
 *                   example: 16
 *                 entropy:
 *                   type: number
 *                   description: Entrop칤a de la contrase침a en bits
 *                   example: 95.27
 *                 in_dictionary:
 *                   type: boolean
 *                   description: Indica si la contrase침a est치 en el diccionario de contrase침as comunes
 *                   example: false
 *                 strength:
 *                   type: object
 *                   properties:
 *                     category:
 *                       type: string
 *                       enum: [Muy D칠bil, D칠bil, Media, Fuerte, Muy Fuerte]
 *                       description: Categor칤a de fuerza de la contrase침a
 *                       example: "Fuerte"
 *                     score:
 *                       type: integer
 *                       minimum: 0
 *                       maximum: 5
 *                       description: Puntuaci칩n num칠rica de 0 a 5
 *                       example: 4
 *                     message:
 *                       type: string
 *                       description: Mensaje descriptivo (solo si est치 en diccionario)
 *                       example: "Esta contrase침a est치 en el diccionario"
 *                 crack_time:
 *                   type: object
 *                   properties:
 *                     seconds:
 *                       type: number
 *                       description: Tiempo estimado en segundos (puede ser notaci칩n cient칤fica para valores grandes)
 *                       example: 1584.23
 *                     readable:
 *                       type: string
 *                       description: Tiempo estimado en formato legible
 *                       example: "26.40 minutos"
 *             examples:
 *               contrase침a_en_diccionario:
 *                 summary: Contrase침a com칰n (en diccionario)
 *                 value:
 *                   password_length: 6
 *                   entropy: 31.00
 *                   in_dictionary: true
 *                   strength:
 *                     category: "Muy D칠bil"
 *                     score: 0
 *                     message: "Esta contrase침a est치 en el diccionario"
 *                   crack_time:
 *                     seconds: 0.00001
 *                     readable: "Instant치neo (Esta en el diccionario)"
 *               contrase침a_fuerte:
 *                 summary: Contrase침a fuerte y segura
 *                 value:
 *                   password_length: 20
 *                   entropy: 130.00
 *                   in_dictionary: false
 *                   strength:
 *                     category: "Muy Fuerte"
 *                     score: 5
 *                   crack_time:
 *                     seconds: "1.54e+26"
 *                     readable: "M치s de mil millones de a침os"
 *       400:
 *         description: Petici칩n inv치lida - Falta el campo password
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "No puede estar vac칤o"
 */
app.post('/api/validate', (req, res) => {
    const { password } = req.body;
    
    if (!password) {
        return res.status(400).json({
            error: 'No puede estar vac칤o'
        });
    }
    
    const result = validator.validate(password);
    res.json(result);
});

app.listen(PORT, () => {
    console.log(`Servidor corriendo en http://localhost:${PORT}`);
});